{"/":{"title":"Cosmostation Wallet","data":{"":"Cosmostation wallet is a non-custodial mobile/web/extension wallet that supports a wide range of PoS networks. The wallet allows users to easily access and sign transactions on various networks and decentralized applications with GUIs available on mobile and web environments.Cosmostation is a leading PoS validator node opeartor across 40+ networks. The networks supported on Cosmostation are interconnected with each other via the Cosmos IBC(Inter-Blockchain Communication) Protocol and multiple partner bridges including Gravity Bridge Chain, Axelar, Nomad, and more.Users are able to trustlessly transfer assets from one chain to another and access large pools of interchain liquidity and a diverse set of dApps deployed on self-soveriegn networks supported on the application.Cosmostation also provides an integrated interchain experience by developing and maintaining mintscan.io, an interchain explorer designed to help users and developers navigate networks and smart contracts."}},"/integration-extension/aptos/connect-and-account":{"title":"Connect, Account","data":{"":"connect and get Account via Cosmostation Extension","connect#Connect":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n\nconst account = await provider.connect();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","vanilla-code#Vanilla Code":"const provider = aptos();\ntry {\nconst account = await provider.connect();\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","response#Response":"export type AptosConnectResponse = {\naddress: string;\npublicKey: string;\n};\n\n{\n\"address\": \"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"publicKey\": \"0x503603cb3ea1801805b952d9d4c6a7302dddfa78cc15042e78132ee907e6b48f\"\n}","account#Account":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n\nconst account = await provider.account();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","vanilla-code-1#Vanilla Code":"try {\nconst provider = aptos();\n\nconst account = await provider.account(payload);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","response-1#Response":"export type AptosAccountResponse = {\naddress: string;\npublicKey: string;\n};\n\n{\n\"address\": \"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"publicKey\": \"0x503603cb3ea1801805b952d9d4c6a7302dddfa78cc15042e78132ee907e6b48f\"\n}"}},"/integration-extension/aptos/event":{"title":"Event","data":{"":"","accountchange#AccountChange":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\nconst handler = (account) => console.log(account);\n\ntry {\nconst provider = await aptos();\n\nprovider.onAccountChange(handler);\n\n// if you want to remove the listener\nprovider.offAccountChange(handler);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n}","vanilla-code#Vanilla Code":"const handler = (account) => console.log(account);\n\ntry {\nconst provider = aptos();\n\nprovider.onAccountChange(handler);\n\n// if you want to remove the listener\nprovider.offAccountChange(handler);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","networkchange#NetworkChange":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\nconst handler = (network) => console.log(network);\n\ntry {\nconst provider = await aptos();\n\nprovider.onNetworkChange(handler);\n\n// if you want to remove the listener\nprovider.offNetworkChange(handler);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n}","vanilla-code-1#Vanilla Code":"const handler = (network) => console.log(network);\n\ntry {\nconst provider = aptos();\n\nprovider.onNetworkChange(handler);\n\n// if you want to remove the listener\nprovider.offNetworkChange(handler);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}"}},"/integration-extension/aptos/network":{"title":"Network","data":{"":"Get Network via Cosmostation Extension","network#Network":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n\nconst network = await provider.network();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","vanilla-code#Vanilla Code":"try {\nconst provider = aptos();\n\nconst network = await provider.network(payload);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","response#Response":"export type AptosNetworkResponse = string;\n\n\"Mainnet\""}},"/integration-extension/aptos/sign-and-submit-transaction":{"title":"Sign And Submit Transaction","data":{"":"Sign And Submit transcation via Cosmostation Extension","signandsubmittransaction#SignAndSubmitTransaction":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n\n// e.g. send payload\nconst payload = {\narguments: [\n\"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"100000000\",\n],\nfunction: \"0x1::aptos_account::transfer\",\ntype: \"entry_function_payload\",\ntype_arguments: [],\n};\n\nconst pendingTransaction = await provider.signAndSubmitTransaction(payload);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","vanilla-code#Vanilla Code":"// e.g. send payload\nconst payload = {\narguments: [\n\"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"100000000\",\n],\nfunction: \"0x1::aptos_account::transfer\",\ntype: \"entry_function_payload\",\ntype_arguments: [],\n};\n\ntry {\nconst provider = aptos();\n\nconst pendingTransaction = await provider.signAndSubmitTransaction(payload);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","request#request":"export type AptosSignPayload<T = unknown> = {\nfunction: string;\ntype: string;\ntype_arguments: string[];\narguments: T[];\n};","response#Response":"export type AptosSignAndSubmitTransactionResponse = {\nhash: string;\nsender: string;\nsequence_number: string;\nmax_gas_amount: string;\ngas_unit_price: string;\nexpiration_timestamp_secs: string;\npayload: AptosSignPayload;\nsignature?: {\ntype: string;\npublic_key: string;\nsignature: string;\n};\n};\n\n{\n\"hash\": \"0x2ca5cddb53929e9a6f348389fae9a5f8f4fe3906a04c8d8b2ee075d7bc0b3540\",\n\"sender\": \"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"sequence_number\": \"15\",\n\"max_gas_amount\": \"1016\",\n\"gas_unit_price\": \"100\",\n\"expiration_timestamp_secs\": \"1668137878\",\n\"payload\": {\n\"function\": \"0x1::coin::transfer\",\n\"type_arguments\": [\"0x1::aptos_coin::AptosCoin\"],\n\"arguments\": [\n\"0x84b0d6b75cd160f1e46a7d18b567e79d79898e1a6487795a83e60d29291d94d6\",\n\"1000000\"\n],\n\"type\": \"entry_function_payload\"\n},\n\"signature\": {\n\"public_key\": \"0x503603cb3ea1801805b952d9d4c6a7302dddfa78cc15042e78132ee907e6b48f\",\n\"signature\": \"0xebacde33a6e22887a45f085086ec86265cb3d61f6f2baecd5aec04a4fcca17b82b7a9c2ea337677a7e0d01b622a1e1b11cc487e2104d588e7f72540c1bcc990c\",\n\"type\": \"ed25519_signature\"\n}\n}","signtransaction#SignTransaction":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n\nconst signature = await provider.signTransaction(payload);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","vanilla-code-1#Vanilla Code":"const cosmostation = provider();\n\n// e.g. send payload\nconst payload = {\narguments: [\n\"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644\",\n\"100000000\",\n],\nfunction: \"0x1::aptos_account::transfer\",\ntype: \"entry_function_payload\",\ntype_arguments: [],\n};\n\ntry {\nconst provider = aptos();\n\nconst signature = await provider.signTransaction(payload);\n} catch (e) {\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n}","request-1#request":"export type AptosSignPayload<T = unknown> = {\nfunction: string;\ntype: string;\ntype_arguments: string[];\narguments: T[];\n};","response-1#Response":"export type AptosSignTransactionResponse = string;\n\n\"0x9d8a438fe580db4f7b9e108a4bce46ad6647905495903f295d06458625913644100000000000000002000000000000000000000000000000000000000000000000000000000000000104636f696e087472616e73666572010700000000000000000000000000000000000000000000000000000000000000010a6170746f735f636f696e094170746f73436f696e00022084b0d6b75cd160f1e46a7d18b567e79d79898e1a6487795a83e60d29291d94d60840420f0000000000f8030000000000006400000000000000ccc36d6300000000010020503603cb3ea1801805b952d9d4c6a7302dddfa78cc15042e78132ee907e6b48f40a58ef2b76eec70a2a538cd7e2faa97def87576ba766feeeb4cd884e9d848fad93cd2c262235b00915be049edcba0046aed6bbd6823a76051fb1bd83791949508\""}},"/integration-extension/aptos/provider":{"title":"Provider","data":{"":"Cosmostation extension support various chains.","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { aptos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await aptos();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n}","vanilla-code#Vanilla Code":"const isCosmostation = \"cosmostation\" in window;\n\nconst aptos = () => {\nif (\"cosmostation\" in window) {\nreturn window.cosmostation.aptos;\n} else {\nwindow.open(\"https://cosmostation.io/wallet/#extension\");\n/**\n* or window.open(\"https://chrome.google.com/webstore/detail/cosmostation/fpkhgmpbidmiogeglndfbkegfdlnajnf\");\n* */\n}\n};\n\nconst provider = aptos();"}},"/integration-extension/cosmos/accounts":{"title":"Accounts","data":{"":"Using Cosmostation Extension accounts.","get-accounts#Get Accounts":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"const account = await provider.getAccount(\"cosmoshub-4\");","vanilla-code#Vanilla Code":"const accoutn = await window.cosmostation.cosmos.request({\nmethod: \"cos_account\",\nparams: { chainName: \"cosmoshub-4\" },\n});","if-connected-successfully-it-will-look-like-below#If connected successfully, it will look like below.":"","response#Response":"type AccountResponse = {\nname: string;\naddress: string;\npublicKey: Uint8Array;\nisLedger: boolean;\n};\n\n{\n\"name\": \"account name\",\n\"address\": \"cosmos1wgeoiheoighwoighwioeghoweghoiweghiow\",\n\"publicKey\": [\n3, 77, 9, 189, 251, 249, 150, 235, 192, 56, 51, 98, 56, 242, 12, 102, 144,\n211, 89, 42, 187, 170\n],\n\"isLedger\": false\n}","request-account-popup#Request Account (Popup)":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"try {\n// ...\nconst account = await provider.requestAccount(\"cosmoshub-4\");\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code-1#Vanilla Code":"const accoutn = await window.cosmostation.cosmos.request({\nmethod: \"cos_requestAccount\",\nparams: { chainName: \"cosmoshub-4\" },\n});","response-1#Response":"type RequestAccountResponse = {\nname: string;\naddress: string;\npublicKey: Uint8Array;\nisLedger: boolean;\n};\n\n{\n\"name\": \"account name\",\n\"address\": \"cosmos1wgeoiheoighwoighwioeghoweghoiweghiow\",\n\"publicKey\": [\n3, 77, 9, 189, 251, 249, 150, 235, 192, 56, 51, 98, 56, 242, 12, 102, 144,\n211, 89, 42, 187, 170\n],\n\"isLedger\": false\n}"}},"/integration-extension/cosmos/auto-sign":{"title":"Auto Sign","data":{"":"If you need automatic signatures for a certain duration","set-autosign#Set AutoSign":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.autoSign.set(\n\"cosmos\",\n1000 // seconds, 0~3600\n);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_setAutoSign\",\nparams: { chainName: \"cosmos\", duration: 1000 },\n});","response#Response":"export type SetAutoSignResponse = null;\n\nnull","get-autosign#Get AutoSign":"for getting auto sign's end time","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.autoSign.get(\"cosmos\");\n\nconst endDate = response ? new Date(response) : null;\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code-1#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_getAutoSign\",\nparams: { chainName: \"cosmos\" },\n});","response-1#Response":"export type GetAutoSignResponse = number | null;\n\n1659335896648","delete-autosign#Delete AutoSign":"","code-using-cosmostationextension-client-2#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.autoSign.delete(\"cosmos\");\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code-2#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_deleteAutoSign\",\nparams: { chainName: \"cosmos\" },\n});","response-2#Response":"export type DeleteAutoSignResponse = null;\n\nnull"}},"/integration-extension/cosmos/disconnect":{"title":"Disconnect","data":{"":"Disconnect from Dapp","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"const response = await provider.disconnect();","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_disconnect\",\n});","response#Response":"type DisconnectResponse = null;\n\nnull"}},"/integration-extension/cosmos/event":{"title":"Event","data":{"":"Account change event","onaccountchanged#onAccountChanged":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"provider.onAccountChanged(() => console.log(\"changed\"));","vanilla-code#Vanilla Code":"window.addEventListener(\"cosmostation_keystorechange\", () => {\nconsole.log(\"Key store in Cosmostation is changed. You may need to refetch the account info.\")\n})","offaccountchanged#offAccountChanged":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"const event = provider.onAccountChanged(() => console.log(\"changed\"));\nprovider.offAccountChanged(event);","vanilla-code-1#Vanilla Code":"window.removeEventListener(\"cosmostation_keystorechange\", handler)"}},"/integration-extension/cosmos/cw20-token":{"title":"CW20 token","data":{"":"@cosmostation/extension-client >= 0.1.7CW20 token via Cosmostation Extension","add-cw20-tokens#Add CW20 Tokens":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"// ...\n\nconst response = await provider.addCW20Tokens(\"juno\", [\n{\ncontractAddress:\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\",\nimageURL:\n\"https://pbs.twimg.com/profile_images/1465777324859826197/RUXx0equ_400x400.jpg\", // optional\ncoinGeckoId: \"neta\", // optional\n},\n{\ncontractAddress:\n\"juno1g2g7ucurum66d42g8k5twk34yegdq8c82858gz0tq2fc75zy7khssgnhjl\",\n},\n]);","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_addTokensCW20\",\nparams: {\nchainName: \"juno\",\ntokens: [\n{\ncontractAddress:\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\",\nimageURL:\n\"https://pbs.twimg.com/profile_images/1465777324859826197/RUXx0equ_400x400.jpg\", // optional\ncoinGeckoId: \"neta\", // optional\n},\n{\ncontractAddress:\n\"juno1g2g7ucurum66d42g8k5twk34yegdq8c82858gz0tq2fc75zy7khssgnhjl\",\n},\n],\n},\n});","response#Response":"export type AddCW20TokenResponse = null;\n\nnull","get-cw20-token-balance#Get CW20 Token Balance":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"// ...\n\nconst response = await provider.getCW20TokenBalance(\n\"juno\",\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\", // contract address\n\"juno14xgdfdnpjtulj6p7rkc75ekxqjq8hc5cg5evx3\" // address\n);","vanilla-code-1#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_getBalanceCW20\",\nparams: {\nchainName: \"juno\",\ncontractAddress:\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\",\naddress: \"juno14xgdfdnpjtulj6p7rkc75ekxqjq8hc5cg5evx3\",\n},\n});","response-1#Response":"export type getCW20TokenBalanceResponse = string;\n\n\"1331775394\"","get-cw20-token-info#Get CW20 Token Info":"","code-using-cosmostationextension-client-2#Code using @cosmostation/extension-client":"// ...\n\nconst response = await provider.getCW20TokenInfo(\n\"juno\",\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\" // contract address\n);","vanilla-code-2#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_getTokenInfoCW20\",\nparams: {\nchainName: \"juno\",\ncontractAddress:\n\"juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr\",\n},\n});","response-2#Response":"export type getCW20TokenInfoResponse = {\ndecimals: number;\nname: string;\nsymbol: string;\ntotal_supply: string;\n};\n\n{\n\"name\": \"NETA\",\n\"symbol\": \"NETA\",\n\"decimals\": 6,\n\"total_supply\": \"31886600000\"\n}"}},"/integration-extension/cosmos/error":{"title":"Error","data":{"":"Error description\nCode\tModel\tDescription\t4001\t-\tUser rejected request\t4100\t-\tThe requested account and/or method has not been authorized by the user.\t4200\t-\tThe requested method is not supported\t-32000\t-\tInvalid input.\t-32600\t-\tThe JSON sent is not a valid Request object.\t-32602\t-\tInvalid method parameter(s).\t-32603\t-\tInternal JSON-RPC error."}},"/integration-extension/cosmos/chains":{"title":"Chains","data":{"":"Get supported chains and add specific chains for using Cosmostation Extension.","add-chains#Add chains":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"try {\n// ...\nawait provider.addChain({\nchainId: \"cerberus-chain-1\",\nchainName: \"cerberus\",\naddressPrefix: \"cre\",\nbaseDenom: \"ucrbrus\",\ndisplayDenom: \"CRBRUS\",\nrestURL: \"https://lcd-office.cosmostation.io/mooncat-1-1\",\ncoinType: \"118\", // optional (default: '118')\ndecimals: 6, // optional (default: 6)\ngasRate: {\n// optional (default: { average: '0.025', low: '0.0025', tiny: '0.00025' })\naverage: \"0.2\",\nlow: \"0.02\",\ntiny: \"0.002\",\n},\nsendGas: \"80000\", // optional (default: '100000')\ntype: \"ETHERMINT\", // optional (default: '')\n});\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code#Vanilla Code":"await window.cosmostation.cosmos.request({\nmethod: \"cos_addChain\",\nparams: {\nchainId: \"cerberus-chain-1\",\nchainName: \"cerberus\",\naddressPrefix: \"cre\",\nbaseDenom: \"ucrbrus\",\ndisplayDenom: \"CRBRUS\",\nrestURL: \"https://lcd-office.cosmostation.io/mooncat-1-1\",\ncoinType: \"118\", // optional (default: '118')\ndecimals: 6, // optional (default: 6)\ngasRate: {\n// optional (default: { average: '0.025', low: '0.0025', tiny: '0.00025' })\naverage: \"0.2\",\nlow: \"0.02\",\ntiny: \"0.002\",\n},\nsendGas: \"80000\", // optional (default: '100000')\ntype: \"ETHERMINT\", // optional (default: '')\n},\n});","response#Response":"type addChainResponse = boolean;\n\ntrue","keplr-to-cosmostation#keplr to cosmostation":"{\nchainId: chainInfo.chainId,\naddressPrefix: chainInfo.bech32Config.bech32PrefixAccAddr,\nbaseDenom: chainInfo.currencies[0].coinMinimalDenom,\nchainName: chainInfo.chainName || chainInfo.chainId,\ndisplayDenom: chainInfo.currencies[0].coinDenom,\ndecimals: chainInfo.currencies[0].coinDecimals,\nrestURL: chainInfo.rest,\ncoinType: String(chainInfo.bip44.coinType),\ngasRate: chainInfo.gasPriceStep\n? {\ntiny: String(chainInfo.gasPriceStep.low),\nlow: String(chainInfo.gasPriceStep.average),\naverage: String(chainInfo.gasPriceStep.high),\n}\n: undefined,\n}\n\nexport interface KeplrChainInfo {\nreadonly rpc: string;\nreadonly rpcConfig?: AxiosRequestConfig;\nreadonly rest: string;\nreadonly restConfig?: AxiosRequestConfig;\nreadonly chainId: string;\nreadonly chainName: string;\nreadonly stakeCurrency: Currency;\nreadonly walletUrl?: string;\nreadonly walletUrlForStaking?: string;\nreadonly bip44: BIP44;\nreadonly alternativeBIP44s?: BIP44[];\nreadonly bech32Config: Bech32Config;\nreadonly currencies: AppCurrency[];\n\nreadonly feeCurrencies: FeeCurrency[];\nreadonly features?: string[];\n\nreadonly beta?: boolean;\n}","supported-chains#Supported chains":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"const supportedChains = await provider.getSupportedChains();","vanilla-code-1#Vanilla Code":"const supportedChains = await window.cosmostation.cosmos.request({\nmethod: \"cos_supportedChainNames\",\n});","response-1#Response":"type SupportedChainNamesResponse = {\nofficial: string[]; // lowercase\nunofficial: string[]; // lowercase\n};\n\n{\n\"official\": [\"cosmos\", \"osmosis\"],\n\"unofficial\": [\"test\"]\n}","supported-chainids#Supported chainIds":"","code-using-cosmostationextension-client-2#Code using @cosmostation/extension-client":"const supportedChains = await provider.getSupportedChainIds();","vanilla-code-2#Vanilla Code":"const supportedChainIds = await window.cosmostation.cosmos.request({\nmethod: \"cos_supportedChainIds\",\n});","response-2#Response":"type SupportedChainIdsResponse = {\nofficial: string[];\nunofficial: string[];\n};\n\n{\n\"official\": [\"cosmoshub-4\", \"gravity-bridge-3\"],\n\"unofficial\": [\"columbus-5\", \"agoric-3\"]\n}","activated-chains#Activated chains":"","code-using-cosmostationextension-client-3#Code using @cosmostation/extension-client":"const activatedChains = await provider.getActivatedChains();","vanilla-code-3#Vanilla Code":"const activatedChains = await window.cosmostation.cosmos.request({\nmethod: \"cos_activatedChainNames\",\n});","response-3#Response":"type ActivatedChainNamesResponse = string[]; // lowercase\n\n[\"cosmos\", \"osmosis\"]","activated-chainids#Activated chainIds":"","code-using-cosmostationextension-client-4#Code using @cosmostation/extension-client":"const activatedChainIds = await provider.getActivatedChainIds();","vanilla-code-4#Vanilla Code":"const activatedChainIds = await window.cosmostation.cosmos.request({\nmethod: \"cos_activatedChainIds\",\n});","response-4#Response":"type ActivatedChainIdsResponse = string[];\n\n[\"cosmoshub-4\", \"gravity-bridge-3\"]"}},"/integration-extension/cosmos/integrate-cosmjs":{"title":"Integrate cosmjs","data":{"":"Integrate cosmjs.","add-package#Add package":"yarn add @cosmostation/cosmos-client\n\nnpm install @cosmostation/cosmos-client","offline-signer#Offline Signer":"import { getOfflineSigner } from \"@cosmostation/cosmos-client\";\n\nconst offlineSigner = await getOfflineSigner(CHAIN_ID);\n\nimport { getOfflineSigner } from \"@cosmostation/cosmos-client\";\nimport { GasPrice, calculateFee } from \"@cosmjs/stargate\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\n\nconst offlineSigner = await getOfflineSigner(CHAIN_ID);\nconst rpcEndpoint = RPC_END_POINT;\nconst client = await SigningCosmWasmClient.connectWithSigner(\nrpcEndpoint,\nofflineSigner\n);\n\n//getAccounts\nconst accounts = await offlineSigner.getAccounts();\n\n//execute\nconst gasPrice = GasPrice.fromString(\"0.01denom\");\nconst fees = {\nupload: calculateFee(1500000, gasPrice),\ninit: calculateFee(500000, gasPrice),\nexec: calculateFee(500000, gasPrice),\n};\n\nconst result = await client.execute(\naccounts[0].address,\nRECEIPT_ADDRESS,\nMESSAGE,\nfees.exec\n);"}},"/integration-extension/cosmos/send-tx":{"title":"Send Transcation","data":{"":"Send transcation via Cosmostation Extension","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { SEND_TRANSACTION_MODE } from \"@cosmostation/extension-client/cosmos\";\n\n// ...\n\nconst response = await provider.sendTransaction(\n\"cosmos\",\n\"abc=\", // base64 string or Uint8Array\nSEND_TRANSACTION_MODE.ASYNC /* SEND_TRANSACTION_MODE or one of [0, 1, 2, 3] */\n);","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_sendTransaction\",\nparams: { chainName: \"cosmos\", txBytes: \"abc=\", mode: 0 },\n});","response#Response":"export type SendTransactionResponse = {\ntx_response: SendTransaction;\n};\n\nexport type SendTransaction = {\ncode: number;\ntxhash: string;\nraw_log?: unknown;\ncodespace?: unknown;\ntx?: unknown;\nlog?: unknown;\ninfo?: unknown;\nheight?: unknown;\ngas_wanted?: unknown;\ngas_used?: unknown;\nevents?: unknown;\ndata?: unknown;\ntimestamp?: unknown;\n};\n\nexport const SEND_TRANSACTION_MODE = {\nUNSPECIFIED: 0,\nBLOCK: 1,\nSYNC: 2,\nASYNC: 3,\n};\n\n{\n\"tx_response\": {\n\"code\": 0,\n\"codespace\": \"\",\n\"data\": \"\",\n\"events\": [],\n\"gas_used\": \"0\",\n\"gas_wanted\": \"0\",\n\"height\": \"0\",\n\"info\": \"\",\n\"logs\": [],\n\"raw_log\": \"[]\",\n\"timestamp\": \"\",\n\"tx\": null,\n\"txhash\": \"4CC689A1E8CF89E1CF1E98D523BC171FEC749DCF8CFED296FA441AF1E0C47C4C\"\n}\n}"}},"/integration-extension/cosmos/sign-message":{"title":"Sign Message","data":{"":"Sign Message via Cosmostation Extension","sign-message#Sign Message":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.signMessage(\n\"cosmoshub-4\",\n\"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\", // signer\n\"message!!!!\" // message\n);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_signMessage\",\nparams: {\nchainName: \"cosmoshub-4\",\nsigner: \"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\nmessage: \"message!!!!\",\n},\n});","response#Response":"export type SignMessageResponse = {\nsignature: string;\npub_key: { type: string; value: string };\n};\n\n{\n\"pub_key\": {\n\"type\": \"tendermint/PubKeySecp256k1\",\n\"value\": \"A00Jvfv5luvAODNiOPIMZpDTWSq7qvoFV8k7ptdsDqLU\"\n},\n\"signature\": \"signature==\"\n}","verifymessage#VerifyMessage":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"try {\nconst response = await provider.signMessage(\n\"cosmoshub-4\",\n\"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\n\"message!!!!\"\n);\n\nconst result = await provider.verifyMessage(\n\"cosmoshub-4\",\n\"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\n\"message!!!!\",\nresponse\n);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code-1#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_signMessage\",\nparams: {\nchainName: \"cosmoshub-4\",\nsigner: \"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\nmessage: \"message!!!!\",\n},\n});\n\nconst result = await window.cosmostation.cosmos.request({\nmethod: \"cos_verifyMessage\",\nparams: {\nchainName: \"cosmoshub-4\",\nsigner: \"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\nmessage: \"message!!!!\",\npublicKey: response.pub_key.value,\nsignature: response.signature,\n},\n});","response-1#Response":"export type VerifyMessageResponse = boolean;\n\ntrue"}},"/integration-extension/cosmos/sign-tx":{"title":"Sign Transcations","data":{"":"Sign transcation via Cosmostation Extension","sign-amino#Sign Amino":"","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.signAmino(\n\"cosmoshub-4\",\n{\nchain_id: \"cosmoshub-4\",\nfee: { amount: [{ denom: \"uatom\", amount: \"5000\" }], gas: \"200000\" },\nmemo: \"\",\nmsgs: [\n{\ntype: \"cosmos-sdk/MsgSend\",\nvalue: {\nfrom_address: \"cosmos1wepghweioghweiog\",\nto_address: \"cosmos1weogihweoighweoigheoiw\",\namount: [{ denom: \"uatom\", amount: \"5000\" }],\n},\n},\n],\nsequence: \"20\",\naccount_number: \"632177\",\n},\n{\nmemo: true, // optional\nfee: true, // optional\ngasRate: {\n// optional\naverage: \"0.2\",\nlow: \"0.02\",\ntiny: \"0.002\",\n},\n}\n);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_signAmino\",\nparams: {\nchainName: \"cosmoshub-4\",\ndoc: {\nchain_id: \"cosmoshub-4\",\nfee: { amount: [{ denom: \"uatom\", amount: \"5000\" }], gas: \"200000\" },\nmemo: \"\",\nmsgs: [\n{\ntype: \"cosmos-sdk/MsgSend\",\nvalue: {\nfrom_address: \"cosmos1wepghweioghweiog\",\nto_address: \"cosmos1weogihweoighweoigheoiw\",\namount: [{ denom: \"uatom\", amount: \"5000\" }],\n},\n},\n],\nsequence: \"20\",\naccount_number: \"632177\",\n},\nisEditMemo: true, // optional\nisEditFee: true, // optional\ngasRate: {\n// optional\naverage: \"0.2\",\nlow: \"0.02\",\ntiny: \"0.002\",\n},\n},\n});","response#Response":"export type SignAminoResponse = {\nsignature: string;\npub_key: { type: string; value: string };\nsigned_doc: SignAminoDoc;\n};\n\nexport type SignAminoDoc = {\nchain_id: string;\nsequence: string;\naccount_number: string;\nfee: Fee;\nmemo: string;\nmsgs: Msg[];\n};\n\nexport type Amount = {\ndenom: string;\namount: string;\n};\n\nexport type Msg<T = unknown> = {\ntype: string;\nvalue: T;\n};\n\nexport type Fee = { amount: Amount[]; gas: string };\n\n{\n\"pub_key\": {\n\"type\": \"tendermint/PubKeySecp256k1\",\n\"value\": \"A00Jvfv5luvAODNiOPIMZpDTWSq7qvoFV8k7ptdsDqLU\"\n},\n\"signature\": \"signature==\",\n\"signed_doc\": {\n\"chain_id\": \"cosmoshub-4\",\n\"fee\": {\n\"amount\": [{ \"denom\": \"uatom\", \"amount\": \"5000\" }],\n\"gas\": \"200000\"\n},\n\"memo\": \"\",\n\"msgs\": [\n{\n\"type\": \"cosmos-sdk/MsgSend\",\n\"value\": {\n\"from_address\": \"cosmos1gr0e3pj3y6fqvzyfm0qxyw9h5dwfrvh8zv3x9p\",\n\"to_address\": \"cosmos1ursv4z57pw8ly2jsgn09dyjha4qrk7aen987ld\",\n\"amount\": [{ \"denom\": \"uatom\", \"amount\": \"5000\" }]\n}\n}\n],\n\"sequence\": \"20\",\n\"account_number\": \"632177\"\n}\n}","sign-direct#Sign Direct":"","code-using-cosmostationextension-client-1#Code using @cosmostation/extension-client":"try {\n// ...\nconst response = await provider.signDirect(\n\"cosmos\",\n{\nchain_id: \"cosmoshub-4\",\naccount_number: \"1\",\nauth_info_bytes: [\n10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114,\n121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80,\n117, 98, 75, 101, 121, 18, 35, 10, 33, 3, 77, 9, 189, 251, 249, 150,\n235, 192, 56, 51, 98, 56, 242, 12, 102, 144, 211, 89, 42, 187, 170, 250,\n5, 87, 201, 59, 166, 215, 108, 14, 162, 212, 18, 4, 10, 2, 8, 127, 24,\n14, 18, 19, 10, 13, 10, 5, 117, 97, 116, 111, 109, 18, 4, 50, 48, 48,\n48, 16, 128, 241, 4,\n],\nbody_bytes: [\n10, 133, 1, 10, 28, 47, 99, 111, 115, 109, 111, 115, 46, 98, 97, 110,\n107, 46, 118, 49, 98, 101, 116, 97, 49, 46, 77, 115, 103, 83, 101, 110,\n100, 18, 101, 10, 42, 99, 114, 101, 49, 103, 114, 48, 101, 51, 112, 106,\n51, 121, 54, 102, 113, 118, 122, 121, 102, 109, 48, 113, 120, 121, 119,\n57, 104, 53, 100, 119, 102, 114, 118, 104, 56, 120, 121, 122, 114, 115,\n118, 18, 42, 99, 114, 101, 49, 120, 53, 119, 103, 104, 54, 118, 119,\n121, 101, 54, 48, 119, 118, 51, 100, 116, 115, 104, 115, 57, 100, 109,\n113, 103, 103, 119, 102, 120, 50, 108, 100, 104, 103, 108, 117, 101,\n122, 26, 11, 10, 4, 117, 99, 114, 101, 18, 3, 49, 48, 48, 18, 0,\n],\n},\n{ memo: true, fee: true } // edit | optional (default: { memo: false, fee: false }),\n);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n\nif (e.code === 4001) {\nconsole.log(\"user rejected request\");\n}\n\n// exception\n}","vanilla-code-1#Vanilla Code":"const response = await window.cosmostation.cosmos.request({\nmethod: \"cos_signDirect\",\nparams: {\nchainName: \"cosmos\",\ndoc: {\nchain_id: \"cosmoshub-4\",\naccount_number: \"1\",\nauth_info_bytes: [\n10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114,\n121, 112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80,\n117, 98, 75, 101, 121, 18, 35, 10, 33, 3, 77, 9, 189, 251, 249, 150,\n235, 192, 56, 51, 98, 56, 242, 12, 102, 144, 211, 89, 42, 187, 170, 250,\n5, 87, 201, 59, 166, 215, 108, 14, 162, 212, 18, 4, 10, 2, 8, 127, 24,\n14, 18, 19, 10, 13, 10, 5, 117, 97, 116, 111, 109, 18, 4, 50, 48, 48,\n48, 16, 128, 241, 4,\n],\nbody_bytes: [\n10, 133, 1, 10, 28, 47, 99, 111, 115, 109, 111, 115, 46, 98, 97, 110,\n107, 46, 118, 49, 98, 101, 116, 97, 49, 46, 77, 115, 103, 83, 101, 110,\n100, 18, 101, 10, 42, 99, 114, 101, 49, 103, 114, 48, 101, 51, 112, 106,\n51, 121, 54, 102, 113, 118, 122, 121, 102, 109, 48, 113, 120, 121, 119,\n57, 104, 53, 100, 119, 102, 114, 118, 104, 56, 120, 121, 122, 114, 115,\n118, 18, 42, 99, 114, 101, 49, 120, 53, 119, 103, 104, 54, 118, 119,\n121, 101, 54, 48, 119, 118, 51, 100, 116, 115, 104, 115, 57, 100, 109,\n113, 103, 103, 119, 102, 120, 50, 108, 100, 104, 103, 108, 117, 101,\n122, 26, 11, 10, 4, 117, 99, 114, 101, 18, 3, 49, 48, 48, 18, 0,\n],\n},\nisEditFee: true,\nisEditMemo: true,\n},\n});","response-1#Response":"export type SignDirectDoc = {\nchain_id: string;\nbody_bytes: Uint8Array;\nauth_info_bytes: Uint8Array;\naccount_number: string;\n};\n\nexport type SignDirectResponse = {\nsignature: string;\npub_key: { type: string; value: string };\nsigned_doc: SignDirectDoc;\n};\n\n{\n\"pub_key\": {\n\"type\": \"tendermint/PubKeySecp256k1\",\n\"value\": \"A00Jvfv5luvAODNiOPIMZpDTWSq7qvoFV8k7ptdsDqLU\"\n},\n\"signature\": \"signature==\",\n\"signed_doc\": {\n\"chain_id\": \"cosmoshub-4\",\n\"account_number\": \"1\",\n\"auth_info_bytes\": [\n10, 80, 10, 70, 10, 31, 47, 99, 111, 115, 109, 111, 115, 46, 99, 114, 121,\n112, 116, 111, 46, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 80, 117,\n98, 75, 101, 121, 18, 35, 10, 33, 3, 77, 9, 189, 251, 249, 150, 235, 192,\n56, 51, 98, 56, 242, 12, 102, 144, 211, 89, 42, 187, 170, 250, 5, 87, 201,\n59, 166, 215, 108, 14, 162, 212, 18, 4, 10, 2, 8, 127, 24, 14, 18, 19, 10,\n13, 10, 5, 117, 97, 116, 111, 109, 18, 4, 50, 48, 48, 48, 16, 128, 241, 4\n],\n\"body_bytes\": [\n10, 133, 1, 10, 28, 47, 99, 111, 115, 109, 111, 115, 46, 98, 97, 110, 107,\n46, 118, 49, 98, 101, 116, 97, 49, 46, 77, 115, 103, 83, 101, 110, 100,\n18, 101, 10, 42, 99, 114, 101, 49, 103, 114, 48, 101, 51, 112, 106, 51,\n121, 54, 102, 113, 118, 122, 121, 102, 109, 48, 113, 120, 121, 119, 57,\n104, 53, 100, 119, 102, 114, 118, 104, 56, 120, 121, 122, 114, 115, 118,\n18, 42, 99, 114, 101, 49, 120, 53, 119, 103, 104, 54, 118, 119, 121, 101,\n54, 48, 119, 118, 51, 100, 116, 115, 104, 115, 57, 100, 109, 113, 103,\n103, 119, 102, 120, 50, 108, 100, 104, 103, 108, 117, 101, 122, 26, 11,\n10, 4, 117, 99, 114, 101, 18, 3, 49, 48, 48, 18, 0\n]\n}\n}"}},"/integration-extension/evm/event":{"title":"Event","data":{"":"","accountschanged#accountsChanged":"If current account is connected to the dApp, return an array of address. Otherwise, return an empty array.\nimport { ethers } from \"ethers\";\nimport { ethereum, InstallError } from \"@cosmostation/extension-client\";\ntry {\nconst provider = await ethereum();\n\nconst handler = provider.on(\"accountsChanged\", (accounts) => {\nif(accounts.length === 0 ) {\nconsole.log(provider.request({'eth_requestAccounts'}))\n} else {\nconsole.log(accounts)\n}\n});\n\nprovider.off(handler)\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n// exception\n}","chainchanged#chainChanged":"import { ethers } from \"ethers\";\nimport { ethereum, InstallError } from \"@cosmostation/extension-client\";\ntry {\nconst provider = await ethereum();\n\nconst handler = provider.on(\"chainChanged\", (chainId) => {\nconsole.log(chainId);\n});\n\nprovider.off(handler);\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n// exception\n}"}},"/integration-extension/evm/supported-rpc-methods":{"title":"Supported RPC methods","data":{"":"","ethereum-json-rpc-methods#Ethereum JSON-RPC Methods":"For the Ethereum JSON-RPC API, please see the Ethereum wikiImportant methods from this API include:\neth_accounts\neth_call\neth_getBalance\neth_sign\neth_sendTransaction\neth_signTransaction","eth_requestaccounts-eip-1102#eth_requestAccounts (EIP-1102)":"Link","returns#Returns":"string[] - An array of a single, hexadecimal Ethereum address string.","example#Example":"// provider.request or\nwindow.cosmostation.ethereum.request({\nmethod: \"eth_requestAccounts\",\n});","wallet_addethereumchain-eip-3085#wallet_addEthereumChain (EIP-3085)":"Link","parameters#Parameters":"type WalletAddEthereumChainParam = [\n{\nchainId: string;\nchainName: string;\nblockExplorerUrls?: string[];\niconUrls?: string[];\nnativeCurrency: {\nname: string;\nsymbol: string;\ndecimals: number;\n};\nrpcUrls: string[];\ncoinGeckoId?: string;\n}\n];","returns-1#Returns":"null - The method returns null if the request was successful, and an error otherwise.","example-1#Example":"// provider.request or\nwindow.cosmostation.ethereum.request({\nmethod: \"wallet_addEthereumChain\",\nparams: [\n{\nchainId: \"0x38\",\nchainName: \"Binance Smart Chain\",\nrpcUrls: [\"https://bsc-dataseed.binance.org\"],\niconUrls: [\n\"https://www.coinreaders.com/imgdata/coinreaders_com/202107/2021072701234398.png\",\n],\nnativeCurrency: {\nname: \"BNB\",\nsymbol: \"BNB\",\ndecimals: 18,\n},\nblockExplorerUrls: [\"https://bscscan.com\"],\n},\n],\n});","wallet_switchethereumchain-eip-3326#wallet_switchEthereumChain (EIP-3326)":"Link","parameters-1#Parameters":"type WalletSwitchEthereumChainParam = [\n{\nchainId: string;\n}\n];","returns-2#Returns":"null - The method returns null if the request was successful, and an error otherwise.","example-2#Example":"// provider.request or\nwindow.cosmostation.ethereum.request({\nmethod: \"wallet_switchEthereumChain\",\nparams: [{ chainId: \"0x38\" }],\n});","wallet_watchasset-eip-747#wallet_watchAsset (EIP-747)":"Link","parameters-2#Parameters":"type WalletWatchAssetParam = {\ntype: string;\noptions: {\naddress: string;\nsymbol: string;\ndecimals: number;\nimage?: string;\ncoinGeckoId?: string;\n};\n};","returns-3#Returns":"boolean - true if the request was successful, error otherwise.","example-3#Example":"// provider.request or\nwindow.cosmostation.ethereum.request({\nmethod: \"wallet_watchAsset\",\nparams: {\ntype: \"ERC20\",\noptions: {\naddress: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\nsymbol: \"WETH\",\ndecimals: 18,\n},\n},\n});","eth_signtypeddata_v3--eth_signtypeddata_v4#eth_signTypedData_v3 / eth_signTypedData_v4":"","example-4#Example":"const msgParams = JSON.stringify({\ndomain: {\n// Defining the chain aka Rinkeby testnet or Ethereum Main Net\nchainId: 1,\n// Give a user friendly name to the specific contract you are signing for.\nname: \"Ether Mail\",\n// If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity\nverifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n// Just let's you know the latest version. Definitely make sure the field name is correct.\nversion: \"1\",\n},\n\n// Defining the message signing data content.\nmessage: {\n/*\n- Anything you want. Just a JSON Blob that encodes the data you want to send\n- No required fields\n- This is DApp Specific\n- Be as explicit as possible when building out the message schema.\n*/\ncontents: \"Hello, Bob!\",\nattachedMoneyInEth: 4.2,\nfrom: {\nname: \"Cow\",\nwallets: [\n\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\",\n],\n},\nto: [\n{\nname: \"Bob\",\nwallets: [\n\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\n\"0xB0B0b0b0b0b0B000000000000000000000000000\",\n],\n},\n],\n},\n// Refers to the keys of the *types* object below.\nprimaryType: \"Mail\",\ntypes: {\n// TODO: Clarify if EIP712Domain refers to the domain the contract is hosted on\nEIP712Domain: [\n{ name: \"name\", type: \"string\" },\n{ name: \"version\", type: \"string\" },\n{ name: \"chainId\", type: \"uint256\" },\n{ name: \"verifyingContract\", type: \"address\" },\n],\n// Not an EIP712Domain definition\nGroup: [\n{ name: \"name\", type: \"string\" },\n{ name: \"members\", type: \"Person[]\" },\n],\n// Refer to PrimaryType\nMail: [\n{ name: \"from\", type: \"Person\" },\n{ name: \"to\", type: \"Person[]\" },\n{ name: \"contents\", type: \"string\" },\n],\n// Not an EIP712Domain definition\nPerson: [\n{ name: \"name\", type: \"string\" },\n{ name: \"wallets\", type: \"address[]\" },\n],\n},\n});\n\nconst from = \"\"; // signer address\nconst params = [from, msgParams];\nconst method = \"eth_signTypedData_v4\";\n\n// provider.request or\nwindow.cosmostation.ethereum.request({\nmethod,\nparams,\n});"}},"/integration-extension/cosmos/provider":{"title":"Provider","data":{"":"Cosmostation extension support various chains.","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { cosmos, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await cosmos();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n}","vanilla-code#Vanilla Code":"window.onload = async () => {\nif (!window.cosmostation) {\nalert(\"Please install cosmostation extension\");\n} else {\n// logic\n}\n};"}},"/integration-extension/evm/use-ethers":{"title":"Use ethers","data":{"":"npmjs\ndocs\n\n\nimport { ethers } from \"ethers\";\nimport { ethereum, InstallError } from \"@cosmostation/extension-client\";\ntry {\nconst provider = await ethereum();\nconst ethersProvider = new ethers.providers.Web3Provider(provider);\n// requestAccounts\nconst accounts = ethersProvider.send(\"eth_requestAccounts\", []);\n// If you want more info, please check out ethers docs (https://docs.ethers.io)\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n// exception\n}"}},"/integration-extension/evm/use-web3-js":{"title":"Use web3.js","data":{"":"npmjs\ndocs\n\n\nimport Web3 from \"web3\";\nimport { ethereum, InstallError } from \"@cosmostation/extension-client\";\ntry {\nconst provider = await ethereum();\nconst web3 = new Web3(provider);\n// requestAccounts\nconst accounts = web3.eth.requestAccounts();\n// If you want more info, please check out web3.js docs (https://web3js.readthedocs.io)\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n// exception\n}","signtypeddata#signTypedData":"const provider = await ethereum();\n\nconst web3 = new Web3(provider);\n\nconst msgParams = JSON.stringify({\ndomain: {\n// Defining the chain aka Rinkeby testnet or Ethereum Main Net\nchainId: 1,\n// Give a user friendly name to the specific contract you are signing for.\nname: \"Ether Mail\",\n// If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity\nverifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n// Just let's you know the latest version. Definitely make sure the field name is correct.\nversion: \"1\",\n},\n\n// Defining the message signing data content.\nmessage: {\n/*\n- Anything you want. Just a JSON Blob that encodes the data you want to send\n- No required fields\n- This is DApp Specific\n- Be as explicit as possible when building out the message schema.\n*/\ncontents: \"Hello, Bob!\",\nattachedMoneyInEth: 4.2,\nfrom: {\nname: \"Cow\",\nwallets: [\n\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\",\n],\n},\nto: [\n{\nname: \"Bob\",\nwallets: [\n\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\n\"0xB0B0b0b0b0b0B000000000000000000000000000\",\n],\n},\n],\n},\n// Refers to the keys of the *types* object below.\nprimaryType: \"Mail\",\ntypes: {\n// TODO: Clarify if EIP712Domain refers to the domain the contract is hosted on\nEIP712Domain: [\n{ name: \"name\", type: \"string\" },\n{ name: \"version\", type: \"string\" },\n{ name: \"chainId\", type: \"uint256\" },\n{ name: \"verifyingContract\", type: \"address\" },\n],\n// Not an EIP712Domain definition\nGroup: [\n{ name: \"name\", type: \"string\" },\n{ name: \"members\", type: \"Person[]\" },\n],\n// Refer to PrimaryType\nMail: [\n{ name: \"from\", type: \"Person\" },\n{ name: \"to\", type: \"Person[]\" },\n{ name: \"contents\", type: \"string\" },\n],\n// Not an EIP712Domain definition\nPerson: [\n{ name: \"name\", type: \"string\" },\n{ name: \"wallets\", type: \"address[]\" },\n],\n},\n});\n\nconst from = \"\"; // signer address\nconst params = [from, msgParams];\nconst method = \"eth_signTypedData_v4\";\nconst result = web3.currentProvider.request({\nmethod,\nparams,\n});"}},"/integration-extension/installation":{"title":"Installation","data":{"":"Create Dapp using \"Cosmostation extension\"","add-package#Add package":"yarn add @cosmostation/extension-client\n\nnpm install @cosmostation/extension-client"}},"/integration-extension/sui/connect-and-get-accounts":{"title":"Connect And Get Accounts","data":{"":"connect and get Account via Cosmostation Extension\nconst response = await window.cosmostation.sui.connect();\n\n// or\n\nconst response = await window.cosmostation.sui.connect([\n\"viewAccount\",\n\"suggestTransactions\",\n]);","response#Response":"export type SuiConnectResponse = boolean;\n\ntrue","get-accounts#Get Accounts":"","vanilla-code#Vanilla Code":"const response = await window.cosmostation.sui.connect();\n\nconst accounts = await window.cosmostation.sui.getAccounts();\n\nconst publicKey = await window.cosmostation.sui.getPublicKey();","response-1#Response":"export type SuiAccountResponse = string[];\n\n[\"0xd2d030d4339531d9cb442caf4be7bb954fddedb4\"]"}},"/integration-extension/evm/provider":{"title":"Provider","data":{"":"Cosmostation extension support various chains.","code-using-cosmostationextension-client#Code using @cosmostation/extension-client":"import { ethereum, InstallError } from \"@cosmostation/extension-client\";\n\ntry {\nconst provider = await ethereum();\n} catch (e) {\nif (e instanceof InstallError) {\nconsole.log(\"not installed\");\n}\n}","vanilla-code#Vanilla Code":"const ethereum = () => {\nif (\"cosmostation\" in window) {\nreturn window.cosmostation.ethereum;\n} else {\nwindow.open(\"https://cosmostation.io/wallet/#extension\");\n/**\n* or window.open(\"https://chrome.google.com/webstore/detail/cosmostation/fpkhgmpbidmiogeglndfbkegfdlnajnf\");\n* */\n}\n};\n\nconst provider = ethereum();"}},"/integration-extension/sui/provider":{"title":"Provider","data":{"":"Cosmostation extension support various chains.\nconst sui = () => {\nif (\"cosmostation\" in window) {\nreturn window.cosmostation.sui;\n} else {\nwindow.open(\"https://cosmostation.io/wallet/#extension\");\n/**\n* or window.open(\"https://chrome.google.com/webstore/detail/cosmostation/fpkhgmpbidmiogeglndfbkegfdlnajnf\");\n* */\n}\n};\n\nconst provider = sui();"}},"/integration-extension/sui/execute-move-call":{"title":"Execute Move Call","data":{"":"Execute Move Call via Cosmostation Extension\nconst payload = {\npackageObjectId: \"0x2\",\nmodule: \"devnet_nft\",\nfunction: \"mint\",\ntypeArguments: [],\narguments: [\n\"Cosmostation NFT\",\n\"An NFT created by Cosmostation Wallet\",\n\"https://avatars.githubusercontent.com/u/49175386?s=200&v=4\",\n],\ngasBudget: 10000,\n};\n\nawait window.cosmostation.sui.connect();\n\nconst response = await window.cosmostation.sui.executeMoveCall(payload);","request#request":"MoveCallTransaction\n\n\nexport interface MoveCallTransaction {\npackageObjectId: ObjectId;\nmodule: string;\nfunction: string;\ntypeArguments: string[] | TypeTag[];\narguments: SuiJsonValue[];\ngasPayment?: ObjectId;\ngasBudget: number;\n}","response#Response":"CertifiedTransaction\nTransactionEffects\n\n\nexport type SuiTransactionResponse = {\ncertificate: CertifiedTransaction;\neffects: TransactionEffects;\n};\n\n{\n\"certificate\": {\n\"transactionDigest\": \"QTWZUMmBzPReVUPjxPRPs271Zve7C4rtCRHm8Cisz4x\",\n\"data\": {\n\"transactions\": [\n{\n\"Call\": {\n\"package\": {\n\"objectId\": \"0x0000000000000000000000000000000000000002\",\n\"version\": 1,\n\"digest\": \"BN1R9u+4+jOoGiGagW50eT+EE+JxtYLaveBPxHhgsiE=\"\n},\n\"module\": \"devnet_nft\",\n\"function\": \"mint\",\n\"arguments\": [\n\"Cosmostation NFT\",\n\"An NFT created by Cosmostation Wallet\",\n\"https://avatars.githubusercontent.com/u/49175386?s=200&v=4\"\n]\n}\n}\n],\n\"sender\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\",\n\"gasPayment\": {\n\"objectId\": \"0x3be2f11263e4c6d77356ba04f053f38ae917bd23\",\n\"version\": 99,\n\"digest\": \"aw8yjNgqA/siJay1eJWv/axflLvGwSM+RbXOilKWAlo=\"\n},\n\"gasPrice\": 1,\n\"gasBudget\": 10000\n},\n\"txSignature\": \"ALSjaMJTiA34zu/d6nnfBH7SxjQvk988NYcNeW8cHJf0zLvriSbIf3/6q7FDtg/5jCNOBknZ38Hmgg0MAhRs7wdWEU2i63wnssWTOQJmMjz5Wq+PhqtBW+GrkSSWOnRKAA==\",\n\"authSignInfo\": {\n\"epoch\": 0,\n\"signature\": \"qhUPMYuuaMqemq+l5a/rDm7VlFmkzXvxtf1gNdwT1xTuNPGYRE0DYBJ+WNnB/D30\",\n\"signers_map\": [\n58, 48, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 2, 0, 3, 0\n]\n}\n},\n\"effects\": {\n\"status\": { \"status\": \"success\" },\n\"gasUsed\": {\n\"computationCost\": 464,\n\"storageCost\": 40,\n\"storageRebate\": 16\n},\n\"transactionDigest\": \"QTWZUMmBzPReVUPjxPRPs271Zve7C4rtCRHm8Cisz4x\",\n\"created\": [\n{\n\"owner\": {\n\"AddressOwner\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\"\n},\n\"reference\": {\n\"objectId\": \"0x1eaadc7b76011f5657821a6aa92eae6098689c9a\",\n\"version\": 100,\n\"digest\": \"jJ99SfS/MZIqudWmXmdXU8GChiXFsej27kWDz6FCNeQ=\"\n}\n}\n],\n\"mutated\": [\n{\n\"owner\": {\n\"AddressOwner\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\"\n},\n\"reference\": {\n\"objectId\": \"0x3be2f11263e4c6d77356ba04f053f38ae917bd23\",\n\"version\": 100,\n\"digest\": \"wgC6a5w4Xqg4D81bOvBiRjkh0m91srqzZP0kLTkCU6Y=\"\n}\n}\n],\n\"gasObject\": {\n\"owner\": { \"AddressOwner\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\" },\n\"reference\": {\n\"objectId\": \"0x3be2f11263e4c6d77356ba04f053f38ae917bd23\",\n\"version\": 100,\n\"digest\": \"wgC6a5w4Xqg4D81bOvBiRjkh0m91srqzZP0kLTkCU6Y=\"\n}\n},\n\"events\": [\n{\n\"coinBalanceChange\": {\n\"packageId\": \"0x0000000000000000000000000000000000000002\",\n\"transactionModule\": \"gas\",\n\"sender\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\",\n\"changeType\": \"Gas\",\n\"owner\": {\n\"AddressOwner\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\"\n},\n\"coinType\": \"0x2::sui::SUI\",\n\"coinObjectId\": \"0x3be2f11263e4c6d77356ba04f053f38ae917bd23\",\n\"version\": 99,\n\"amount\": -488\n}\n},\n{\n\"newObject\": {\n\"packageId\": \"0x0000000000000000000000000000000000000002\",\n\"transactionModule\": \"devnet_nft\",\n\"sender\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\",\n\"recipient\": {\n\"AddressOwner\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\"\n},\n\"objectType\": \"0x2::devnet_nft::DevNetNFT\",\n\"objectId\": \"0x1eaadc7b76011f5657821a6aa92eae6098689c9a\",\n\"version\": 100\n}\n},\n{\n\"moveEvent\": {\n\"packageId\": \"0x0000000000000000000000000000000000000002\",\n\"transactionModule\": \"devnet_nft\",\n\"sender\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\",\n\"type\": \"0x2::devnet_nft::MintNFTEvent\",\n\"fields\": {\n\"creator\": \"0xddee25bee35fa634a1d486d16281f333370ef3f2\",\n\"name\": \"Cosmostation NFT\",\n\"object_id\": \"0x1eaadc7b76011f5657821a6aa92eae6098689c9a\"\n},\n\"bcs\": \"Hqrce3YBH1ZXghpqqS6uYJhonJrd7iW+41+mNKHUhtFigfMzNw7z8hBDb3Ntb3N0YXRpb24gTkZU\"\n}\n}\n],\n\"dependencies\": [\"CxQQcJfAyDkhxiLiXxrAkFREikMNnngwoGW7kVouMY7w\"]\n}\n}"}},"/integration-extension/sui/sign-and-execute-transaction":{"title":"Sign And Execute Transaction","data":{"":"import { TransactionBlock } from \"@mysten/sui.js\";\n\n// Send Sui coin\nconst tx = new TransactionBlock();\n\nconst sampleSendCoinAmount = \"100000\";\n\nconst sampleReceiverAddress = \"0x...\";\n\nconst [coin] = tx.splitCoins(tx.gas, [tx.pure(sampleSendCoinAmount)]);\n\ntx.transferObjects([coin], tx.pure(sampleReceiverAddress));\n\n// SuiSignAndExecuteTransactionBlockInput\nconst payload = {\ntransactionBlock: tx,\noptions: {\nshowInput: true,\nshowEffects: true,\nshowEvents: true,\n},\n};\n\nawait window.cosmostation.sui.connect();\n\nconst response = await window.cosmostation.sui.signAndExecuteTransaction(\npayload\n);","request#request":"SuiSignAndExecuteTransactionBlockInput\n\n\nexport interface SuiSignTransactionBlockInput {\ntransactionBlock: TransactionBlock;\naccount: WalletAccount;\nchain: IdentifierString;\n}\n\nexport interface SuiSignAndExecuteTransactionBlockInput\nextends SuiSignTransactionBlockInput {\nrequestType?: ExecuteTransactionRequestType;\noptions?: SuiTransactionBlockResponseOptions;\n}\n\nexport type SuiTransactionBlockResponseOptions = {\nshowInput?: boolean | undefined;\nshowEffects?: boolean | undefined;\nshowEvents?: boolean | undefined;\nshowObjectChanges?: boolean | undefined;\nshowBalanceChanges?: boolean | undefined;\n};","response#Response":"SuiTrasactionResponse\nSuiTransactionBlock\nTransactionEffects\nTransactionEvents\nSuiObjectChange\nBalanceChange\n\n\nexport type SuiTransactionResponse = {\ndigest: TransactionDigest,\ntransaction: optional(SuiTransactionBlock),\neffects: optional(TransactionEffects),\nevents: optional(TransactionEvents),\ntimestampMs: optional(string()),\ncheckpoint: optional(string()),\nconfirmedLocalExecution: optional(boolean()),\nobjectChanges: optional(array(SuiObjectChange)),\nbalanceChanges: optional(array(BalanceChange)),\n/* Errors that occurred in fetching/serializing the transaction. */\nerrors: optional(array(string())),\n};\n\n{\n\"digest\": \"ADxukibq4o4QqiMgr6QqtXnXczh5MGCQqMkgCKUW5NXT\",\n\"transaction\": {\n\"data\": {\n\"messageVersion\": \"v1\",\n\"transaction\": {\n\"kind\": \"ProgrammableTransaction\",\n\"inputs\": [\n{\n\"type\": \"pure\",\n\"valueType\": \"u64\",\n\"value\": \"1000000000\"\n},\n{\n\"type\": \"object\",\n\"objectType\": \"sharedObject\",\n\"objectId\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n\"initialSharedVersion\": \"1\",\n\"mutable\": true\n},\n{\n\"type\": \"pure\",\n\"valueType\": \"address\",\n\"value\": \"0x184fbf9d6c2d2d3f27e27fe3ca2d3b4080bd406221e345e2d36633e638e988e1\"\n}\n],\n\"transactions\": [\n{\n\"SplitCoins\": [\n\"GasCoin\",\n[\n{\n\"Input\": 0\n}\n]\n]\n},\n{\n\"MoveCall\": {\n\"package\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n\"module\": \"sui_system\",\n\"function\": \"request_add_stake\",\n\"arguments\": [\n{\n\"Input\": 1\n},\n{\n\"Result\": 0\n},\n{\n\"Input\": 2\n}\n]\n}\n}\n]\n},\n\"sender\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\",\n\"gasData\": {\n\"payment\": [\n{\n\"objectId\": \"0x63c8f9756ed686a70d8b6e4b60a05eed70de52c7a864a3eb1432294bc47521f6\",\n\"version\": 120,\n\"digest\": \"4eWN3j13gkCgmpF3ino3PyBnBGcr8TM9g7oXyLVcFvDf\"\n}\n],\n\"owner\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\",\n\"price\": \"990\",\n\"budget\": \"10269000\"\n}\n},\n\"txSignatures\": [\n\"AOM7i8tZRt314VYWxtBr5DAUukOZJsRcX6YUZjKVzB/j0gyYqCMZ1mIVPFdM79VNXzEpS2Te8Ez7g878a13Ybwz6TRHL+z8z7uHmh38YqSzeZTJS1AuOfKSpuon1IV17MQ==\"\n]\n},\n\"effects\": {\n\"messageVersion\": \"v1\",\n\"status\": {\n\"status\": \"success\"\n},\n\"executedEpoch\": \"25\",\n\"gasUsed\": {\n\"computationCost\": \"990000\",\n\"storageCost\": \"721559200\",\n\"storageRebate\": \"713064528\",\n\"nonRefundableStorageFee\": \"7202672\"\n},\n\"modifiedAtVersions\": [\n{\n\"objectId\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n\"sequenceNumber\": \"1999135\"\n},\n{\n\"objectId\": \"0x5b890eaf2abcfa2ab90b77b8e6f3d5d8609586c3e583baf3dccd5af17edf48d1\",\n\"sequenceNumber\": \"1999135\"\n},\n{\n\"objectId\": \"0x63c8f9756ed686a70d8b6e4b60a05eed70de52c7a864a3eb1432294bc47521f6\",\n\"sequenceNumber\": \"120\"\n}\n],\n\"sharedObjects\": [\n{\n\"objectId\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n\"version\": 1999135,\n\"digest\": \"DwbUaKPdp58kXHhh3WGzSnxv1uuzoEP55mmvrZyRqx8Q\"\n}\n],\n\"transactionDigest\": \"ADxukibq4o4QqiMgr6QqtXnXczh5MGCQqMkgCKUW5NXT\",\n\"created\": [\n{\n\"owner\": {\n\"AddressOwner\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\"\n},\n\"reference\": {\n\"objectId\": \"0xddd21c1a8b5d7a2bf1a6a689434c2dfe9b524bd5d66f140b54da3ee6b2a6c21f\",\n\"version\": 1999136,\n\"digest\": \"BEEN82jwzg2gku5meXogNQLz1zSnbv9rEFRVu7RhekPd\"\n}\n}\n],\n\"mutated\": [\n{\n\"owner\": {\n\"Shared\": {\n\"initial_shared_version\": 1\n}\n},\n\"reference\": {\n\"objectId\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n\"version\": 1999136,\n\"digest\": \"CgnEEDYNDnAyFb6GzXwvCTC5X1RqAUEGkLQN59dn86Fn\"\n}\n},\n{\n\"owner\": {\n\"ObjectOwner\": \"0x0000000000000000000000000000000000000000000000000000000000000005\"\n},\n\"reference\": {\n\"objectId\": \"0x5b890eaf2abcfa2ab90b77b8e6f3d5d8609586c3e583baf3dccd5af17edf48d1\",\n\"version\": 1999136,\n\"digest\": \"7zdHAR9jtbEuaNroxVUUXGgMBJCVF9RRfQ1ACy4sGr8d\"\n}\n},\n{\n\"owner\": {\n\"AddressOwner\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\"\n},\n\"reference\": {\n\"objectId\": \"0x63c8f9756ed686a70d8b6e4b60a05eed70de52c7a864a3eb1432294bc47521f6\",\n\"version\": 1999136,\n\"digest\": \"4uYp4yEhf4kcKmdUSZmxao5nGo38mydK93w9Vj6GdmJy\"\n}\n}\n],\n\"gasObject\": {\n\"owner\": {\n\"AddressOwner\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\"\n},\n\"reference\": {\n\"objectId\": \"0x63c8f9756ed686a70d8b6e4b60a05eed70de52c7a864a3eb1432294bc47521f6\",\n\"version\": 1999136,\n\"digest\": \"4uYp4yEhf4kcKmdUSZmxao5nGo38mydK93w9Vj6GdmJy\"\n}\n},\n\"eventsDigest\": \"5MMMagM2CoBtWGL7x39i2H8FeF75LWfFzgZDpzc5YC1H\",\n\"dependencies\": [\n\"Ui22Hhc6NyVEnAhRWCWVT333JvvBWG75qJx9qBg9VE1\",\n\"53k4PWPByFxMLEYu53coAPiFCoxoz1mkUnv2Nr73UFw1\",\n\"6oLy1FVtkMhuknWGsz7cvyYhn5CZFGPnyLhXZYuBd8kh\"\n]\n},\n\"events\": [\n{\n\"id\": {\n\"txDigest\": \"ADxukibq4o4QqiMgr6QqtXnXczh5MGCQqMkgCKUW5NXT\",\n\"eventSeq\": \"0\"\n},\n\"packageId\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n\"transactionModule\": \"sui_system\",\n\"sender\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\",\n\"type\": \"0x3::validator::StakingRequestEvent\",\n\"parsedJson\": {\n\"amount\": \"1000000000\",\n\"epoch\": \"25\",\n\"pool_id\": \"0x2f52ce5bfcc5d517a3bdc0c154ab1cbd3757822c5db6a3fa514b9cc81697f999\",\n\"staker_address\": \"0x67b11c023bced7ae79530b653e81e37116836acf24d536e6ffbd4bf37159d3cf\",\n\"validator_address\": \"0x184fbf9d6c2d2d3f27e27fe3ca2d3b4080bd406221e345e2d36633e638e988e1\"\n},\n\"bcs\": \"9tL9umBpTLeUxXFn24EEEukPeFNYNcg2nEcTog31dxEVVuZwseE4Q6FHCM5YNfG6PadX7n5RYyhfRN7cxhApcyMBJ3UfxWSWbzEvFTrKNrg5oq1FVCB2bz2uUsbQXv5xcAAoWFH6CQTcVBj3MyEZwQVHy\"\n}\n],\n\"confirmedLocalExecution\": true\n}"}},"/integration-mobile/cosmjs":{"title":"Integrate cosmjs","data":{"":"Cosmjs TutorialCosmjs Example CodeCosmjs Example Page","add-package#Add package":"yarn add @cosmostation/cosmos-client\n\nnpm install @cosmostation/cosmos-client","offline-signer#Offline Signer":"import { getOfflineSigner } from \"@cosmostation/cosmos-client\";\n\nconst offlineSigner = await getOfflineSigner(CHAIN_ID);\n\nimport { getOfflineSigner } from \"@cosmostation/cosmos-client\";\nimport { GasPrice, calculateFee } from \"@cosmjs/stargate\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\n\nconst offlineSigner = await getOfflineSigner(CHAIN_ID);\nconst rpcEndpoint = RPC_END_POINT;\nconst client = await SigningCosmWasmClient.connectWithSigner(\nrpcEndpoint,\nofflineSigner\n);\n\n//getAccounts\nconst accounts = await offlineSigner.getAccounts();\n\n//execute\nconst gasPrice = GasPrice.fromString(\"0.01denom\");\nconst fees = {\nupload: calculateFee(1500000, gasPrice),\ninit: calculateFee(500000, gasPrice),\nexec: calculateFee(500000, gasPrice),\n};\n\nconst result = await client.execute(\naccounts[0].address,\nRECEIPT_ADDRESS,\nMESSAGE,\nfees.exec\n);"}},"/integration-mobile/cosmostation":{"title":"Cosmostation","data":{"":"Using @cosmostation/extension-client to support both Mobile and PC in the same way as extensions.\nIf your project's dApp works well in Cosmostation Extension, it will work well\nin mobile too.\nFor more detailed explanation, please refer to the Cosmostation Extension Guide."}},"/integration-mobile/intro":{"title":"Introduction","data":{"":"Mobile wallets support various types of services.\nAccess dApps on desktop/mobile via QR code scanning.\nConnect with dApps from your mobile browser via Deep Link.\nIn-app browser support on mobile wallets.\n\nCosmostation Mobile Wallet supports dApps through various methods.\nCosmostation(Same way as Extension)\nCosmos-Kit\nWalletConnect 1.0, WalletConnect 2.0\n\nConnections using Cosmostation and WalletConnect also implement the Keplr and Web3j specifications.","how-to-listing#How to listing?":"For add your dapp to Mobile Wallet.Create a pull request from the link below.https://github.com/cosmostation/chainlist/blob/main/dapp/README.md"}},"/integration-mobile/walletconnect/accounts":{"title":"Accounts","data":{"":"Use account on Cosmostation Mobile Wallet via WalletConnect.","get-accounts#Get Accounts":"Select an account after checking unsupported chains or empty accounts.The response only contains selected account.\n\nexport function getAccountRequest(chainIds) {\nreturn {\nid: payloadId(),\njsonrpc: \"2.0\",\nmethod: \"cosmostation_wc_accounts_v1\",\nparams: chainIds,\n};\n}\n\nconst request = getAccountRequest([CHAIN_ID, NOT_SUPPORTED_CHAIN_ID]);\nconnector\n.sendCustomRequest(request)\n.then((accounts) => {\nsetAccounts(accounts);\nconsole.log(accounts.length == 1);\n})\n.catch((error) => {\nconsole.error(error);\n});\n\ntype AccountResponse = {\nname: string;\nalgo: string;\naddress: Uint8Array;\npubKey: string;\nbech32Address: string;\n};"}},"/integration-mobile/walletconnect/connect":{"title":"Connect","data":{"":"Cosmostation Mobile Wallet supports dApps via WalletConnect.(Deprecated)WalletConnect Example CodeWalletConnect Example Page\nimport WalletConnect from \"@walletconnect/client\";\n\nexport async function connect() {\nconst connector = new WalletConnect({\nbridge: \"https://bridge.walletconnect.org\",\nsigningMethods: [\n\"cosmostation_wc_accounts_v1\",\n\"cosmostation_wc_sign_tx_v1\",\n],\nqrcodeModal: new CosmostationWCModal(),\n});\n\nawait connector.createSession();\n\nreturn connector;\n}","modal#Modal":"Use CosmostationModal when initializing WalletConnect to use DeepLink and QRCode connect.\nyarn add @cosmostation/wc-modal\n\nimport CosmostationWCModal from \"@cosmostation/wc-modal\";","event#Event":"By implementing connect/disconnect event, handle connect state event.\nconst connector = await connect();\n\nconnector.on(\"connect\", (error, payload) => {\nif (error) {\nsetConnected(false);\nthrow error;\n}\nsetConnected(true);\n});\n\nconnector.on(\"disconnect\", (error, payload) => {\nsetConnected(false);\n});"}},"/integration-mobile/walletconnect/sign-tx":{"title":"Sign Transcations","data":{"":"Sign transcation using Cosmostation Mobile Wallet via WalletConnect.\nexport function getSignTxRequest(chainId, signer, signDoc) {\nreturn {\nid: payloadId(),\njsonrpc: \"2.0\",\nmethod: \"cosmostation_wc_sign_tx_v1\",\nparams: [chainId, signer, signDoc],\n};\n}\n\nconst signDoc = makeAminoSignDoc(\n[message],\nfee,\nCHAIN_ID,\n\"\",\naccountNumber,\nsequence\n);\n\nconst request = getSignAminoRequest(CHAIN_ID, address, signDoc);\n\nconnector\n.sendCustomRequest(request)\n.then((response) => {\nconst signed = _.get(response, \"0.signed\");\nconst signature = _.get(response, \"0.signature\");\nreturn broadcastTx(signed, signature);\n})\n.then((result) => {\nconst code = _.get(result, \"code\");\nif (code === 0) {\nconst txHash = _.get(result, \"txhash\");\nconsole.log(txHash);\n} else {\nconst rawLog = _.get(result, \"raw_log\");\nconsole.error(rawLog);\n}\n});\n\ntype SignTxResponse = {\nsigned: StdSignDoc;\nsignature: { signature: string; pub_key: { type: string; value: string } };\n};"}},"/overview/extension/account/add-ledger-account":{"title":"Add Ledger Account","data":{"":"Create a new ledger wallet","supported-devices--connection-method#Supported Devices & Connection Method":"Ledger S, X\nUSB, HID","adding-ledger-account#Adding Ledger Account":"Account icon → setting icon → Add account → Create a new ledger account → Account name → HD path setting → Done","hd-path-setting#HD path setting":"Up to 101 Ledger accounts and wallets can be derived from a single set of mnemonics in a Ledger by assigning any number smaller than 101 to HD paths when creating a Ledger account.","connecting-ledger#Connecting Ledger":"Select the new Ledger account to connect on home screen.","cosmos-networks#Cosmos Networks":"Cosmostation extension wallet supports Cosmos SDK chain wallets derived from HD paths 44'/118'/0'/0/n. Connecting to any Cosmos SDK chain with a Ledger automatically derives all the Cosmos SDK chain wallets supported by a Ledger account.","evm-networks#EVM Networks":"Cosmostation extension wallet supports EVM wallets derived from HD paths 44'/60'/0'/0/n. Connecting to any EVM network with a Ledger automatically derives all the EVM network wallets supported by a Ledger account.","not-supported-networks#Not Supported Networks":"44'/118'/0'/0/n is a generic HD path for Cosmos SDK chains, but some networks use custom HD paths assigned by their network foundations. For example, a Cosmos SDK chain Crypto.org’s official HD path used by the foundation and Ledger is 44'/394'/0'/0/n.\n\nIn an effort to sync with the network foundations and Ledger, Cosmostation extension wallet derives wallets solely from HD paths used by the foundations and Ledger. Instead of deriving all the Cosmos SDK chain wallets from 44'/118'/0'/0/n path, Cosmostation only supports the wallets of Cosmos SDK chains whose official HD path is 44'/118'/0'/0/n for now.\n\nCustom HD path wallets will be supported in future updates.","signing-transactions#Signing Transactions":"","cosmos-sdk-chains#Cosmos SDK Chains":"Open the Cosmos app on Ledger\nCheck the review message on Ledger\nApprove or reject a transaction\n\nAll the Cosmos SDK chains' transactions can be signed from the Cosmos app.","ethereum--evm#Ethereum & EVM":"Open the Ethereum app on Ledger\nCheck the review message on Ledger\nApprove or reject a transaction\n\nAll the EVM chains' transactions can be signed from the Ethereum app."}},"/overview/extension/account/add-account":{"title":"Add Account","data":{"":"Create a new wallet, restore with an existing mnemonic phrase, or restore with a private key.","create-wallet#Create wallet":"The following process is for users who do not have a wallet and wish to create a new wallet.'Create wallet' will import a new wallet with a mnemonic phrase.\nStep 1 Click 'Create wallet'Step 2 Enter 'Account name'. Account name will be used for users to easily distinguish wallets imported on the extension.Step 3 Your mnemonic phrase will be displayed. Cosmostation Wallet Extension supports both 12 words and 24 words mnemonic phrases.\nPlease make sure to back up your mnemonic phrase and save it in a safe location only accessible by you. If the mnemonic phrase is lost, you will not be able to regain access to your account.DO NOT share your Secret Recovery Phrase with anyone! If someone has access to your secret phrase, they will have access to your wallet. Cosmostation support will NEVER ask you for your secret phrase or your private key.\nStep 4 (Optional) Choose the HD path you wish to import. Cosmostation Wallet Extension supports HD paths designated/unique to each network by default.Step 5 Enter your seed phrase in correct order. This process is to confirm that you have saved the correct mnemonic phrase.Step 6 Choose networks to display in your Cosmostation Wallet Extension. You must select at least 1 chain in order to proceed.Step 7 Enter your password for Cosmostation Wallet Extension. Password must be more than 8 characters.","restore-wallet-with-a-mnemonic-phrase#Restore wallet with a mnemonic phrase":"The following process is for users who already have a mnemonic phrase.\nStep 1 Click 'Restore with mnemonics'Step 2 Enter 'Account name' and 'Mnemonic phrases'. Account name will be used for you to easily distinguish wallets.Step 3 (Optional) Choose the HD path you wish to import. Cosmostation Wallet Extension supports HD paths designated/unique to each network by default.Step 4 Choose networks to display in your Cosmostation Wallet Extension. You must select at least 1 chain in order to proceed.Step 5 Enter your password for Cosmostation Wallet Extension. Password must be more than 8 characters.","restore-wallet-with-a-private-key#Restore wallet with a private key":"The following process is for users that already have a private key.\nStep 1 Click 'Import wallet'.Step 2 Click 'Restore with private key'.Step 3 Enter your 'Account name' and 'Private key'. (Private keys start with 0x and consists of a 66 digit string)Step 4 Choose networks to display in your Cosmostation Wallet Extension. You must select at least 1 chain in order to proceed.Step 5 Enter your password for Cosmostation Wallet Extension. Password must be more than 8 characters."}},"/overview/extension/account/intro":{"title":"Introduction","data":{"":"Cosmostation Wallet Extension allows you to add and manage multiple accounts.\nSecurely manage your accounts in a convenient user interface.","add-account#Add Account":"'Add Account' has three options. [Creat a new account], [Import mnemonics], and [Import private key]. Please refer to each page for detailed instructions.\n\n\nStep 1 Click 'Add account' under 'Account Management'.Step 2 You will see three options to choose from. Please refer to the following link for detailed instructions.","manage-keys#Manage keys":"Under 'Account Management', you are able to see all the accounts that are registered on Cosmostation Extension.If you created a new account or restored a wallet with a mnemonic phrase, you will be able to see the option to [View mnemonics], [View private key], and [Delete account].If you restored a wallet with a private key, then you will only be able to choose [View private key].","delete-account#Delete Account":"You can delete accounts from Cosmostation Extension.Once deleted, you can restore your account again by importing the same mnemonic phrase or private key.\n\nYou are required to enter your password before deleting your account.Once deleted, if you lose your mnemonic phrase or private key you will not be able to gain access to the account again."}},"/overview/extension/chains":{"title":"Chains","data":{"":"Cosmostation Wallet Extension supports various PoS networks.","addremove-chains#Add/Remove Chains":"Add/remove chains to efficiently manage your wallet.Select chains you want to display on the list. Only selected chains will be displayed on both the dashboard and wallet detail page.\nStep 1 View chains that are added to your list. Click 'Add chain' to add/remove chains from the list.Step 2 By toggling on/off, you can choose chains that you want to display on Cosmostation Wallet Extension.Step 3 Selected chains are also visible on the top right side of wallet details."}},"/overview/extension/dapps":{"title":"dApp","data":{"":"Cosmostation Wallet Exntension supports various dApps deployed on PoS networks.","connection-status#Connection status":"Easily check if the wallet extension is connect to the dApp.If you wish to disconnect, click the connection status under your account name.","disconnect-with-just-a-click#Disconnect with just a click.":"Easily disconnect from dApps by clicking the connecting status under your account name."}},"/overview/extension/intro":{"title":"Overview","data":{"":"What is Cosmostation Wallet Extension?Cosmostation Wallet Extension is a non-custodial chrome extension wallet that supports multiple soveriegn networks and inter-blockchain bridges. The wallet extension allows users to easily interact with networks and decentralized applications with just a few clicks.To download Cosmostation Wallet Extension, click this link to download from the chrome webstore.","wallet-detail-page#Wallet detail page":"Manage your account by clicking . Click here for more information.\nSend & deposit your tokens. Click here for more information.\nClick  to view your account history on Mintscan.\nConnect/disconnect with dApps and check the connection status under your account name.","dashboard#Dashboard":"View all selected chains, current token price, and price change in one dashboard.\nCustomize displayed chains by clicking '+ Add chain'"}},"/integration-mobile/walletconnect2":{"title":"WalletConnect 2.0","data":{"":"Cosmostation Mobile Wallet implement WalletConnect 2.0 specs.WalletConnect 2.0 Cosmos GuideWalletConnect 2.0 Example CodeWalletConnect 2.0 Example Page","connect#Connect":"import Client from \"@walletconnect/sign-client\";\nimport {\nPairingTypes,\nProposalTypes,\nSessionTypes,\n} from \"@walletconnect/types\";\n\nfunction App() {\nconst [client, setClient] = useState<Client>();\nconst [pairings, setPairings] = useState<PairingTypes.Struct[]>([]);\nconst [session, setSession] = useState<SessionTypes.Struct>();\nconst [chains, setChains] = useState<string[]>([]);\nconst [accounts, setAccounts] = useState<string[]>([]);\n\nuseEffect(() => {\nif (client === undefined) {\ncreateClient();\n}\n}, [client]);\n\nconst createClient = async () => {\ntry {\nconst _client = await Client.init({...});\nsetClient(_client);\n} catch (err) {\nthrow err;\n} finally {\n}\n};\n\nasync function connect() {\nconst modal = new Modal();\nif (typeof client === \"undefined\") {\nthrow new Error(\"WalletConnect is not initialized\");\n}\n\ntry {\nconst requiredNamespaces = getRequiredNamespaces();\nconst { uri, approval } = await client.connect({\npairingTopic: undefined,\nrequiredNamespaces: {\ncosmos: {\nmethods: [\"cosmos_signDirect\", \"cosmos_signAmino\"],\nchains: [\"cosmos:cosmoshub-4\"],\nevents: [],\n},\n},\n});\n\nif (uri) {\nconst standaloneChains = Object.values(requiredNamespaces)\n.map((namespace) => namespace.chains)\n.flat();\n\nmodal.open(uri, standaloneChains);\n}\n\nconst session = await approval();\nconsole.log(\"Established session:\", session);\nawait onSessionConnected(session);\nsetPairings(client.pairing.getAll({ active: true }));\n} catch (e) {\nconsole.error(e);\n} finally {\nmodal.close();\n}\n}\n\nconst getRequiredNamespaces = (): ProposalTypes.RequiredNamespaces => {\nreturn Object.fromEntries(\nchains.map((namespace) => [\nnamespace,\n{\nmethods: [\"cosmos_signDirect\", \"cosmos_signAmino\"],\nchains: chains.filter((chain) => chain.startsWith(namespace)),\nevents: [],\n},\n])\n);\n};\n\nconst onSessionConnected = useCallback(\nasync (_session: SessionTypes.Struct) => {\nconst allNamespaceAccounts = Object.values(_session.namespaces)\n.map((namespace) => namespace.accounts)\n.flat();\nconst allNamespaceChains = Object.keys(_session.namespaces);\n\nsetSession(_session);\nsetChains(allNamespaceChains);\nsetAccounts(allNamespaceAccounts);\n},\n[]\n);\n}"}},"/overview/extension/settings":{"title":"Settings","data":{"":"Customize the wallet extension in wallet settings.","dark-mode#Dark mode":"Toggle back and forth to choose between Dark or Light mode.","address-book#Address Book":"Create different address books for each chain. You can use the address book when using the 'Send' function.\nStep 1 View / Add addresses to the chain you selected.Step 2 Enter address information and click 'Save'.\nLabel your address to distinguish them from one another.\n\n\nMemo is optional but required to transfer assets to centralized cryptocurrency\nexchanges. Centralized exchanges will ask you to enter a memo for\nidentification when you make a deposit.\n\n\n\nIf you add addresses in the address book, you can use the address book feature when sending assets.","change-password#Change password":"Enter your current password and to change it to a new password. Enter the new password once more to confirm.\n\nMake sure that you enter more than 8 characters for the password.","currency--language#Currency & Language":"Cosmostation Wallet Extension supports 2 languages and 5 currencies.\nWe plan to support more currencies and languages in the near future.","lock-screen#Lock screen":"Lock your screen to secure your wallet.\n!"}},"/overview/extension/transfer-coins":{"title":"Transfer coins","data":{"":"Transfer coins with just one click via Cosmostation Wallet Extension.\nCosmostation Wallet Extension currently DOES NOT SUPPORT IBC TRANSFERS.If you are trying to send assets to a different chain, the send button will be deactivated.","receive#Receive":"Click 'Deposit' to copy the address to the clipboard or scan the QR code.","send#Send":"The following process is for users sending assets to a different address.\nStep 1 Enter 'Recipient address', 'Amount,' and 'Memo.' The memo field is optional but required for sending to specific centralized cryptocurrency exchanges. Centralized exchanges will ask you to enter a memo for identification when you make a deposit.\nMake sure that you enter the correct recipient address.Entering an incorrect address may result in loss of funds and responsibility of entering the correct address is on the user.\nStep 2, 3 Check the transaction information and confirm."}},"/overview/mobile":{"title":"Cosmostation Mobile Wallet","data":{"":"Cosmostation wallet support various cosmos networks.How to Derive(Add) & Manage WalletsWallet Management“dApp” on Cosmostation Mobile WalletIntroducing AuthZ on Cosmostation MobileGas OptimizationKava DeFiOsmosis and Sifchain DEXNFT on Cosmostation MobileStarname Service"}}}